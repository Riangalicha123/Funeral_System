{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Bar = _resolveComponent(\"Bar\");\n  return $data.loaded ? (_openBlock(), _createBlock(_component_Bar, {\n    key: 0,\n    data: $data.chartData\n  }, null, 8 /* PROPS */, [\"data\"])) : _createCommentVNode(\"v-if\", true);\n}","map":{"version":3,"names":["$data","loaded","_createBlock","_component_Bar","data","chartData"],"sources":["C:\\laragon\\www\\GitHub\\Funeral_System\\src\\components\\Admin\\WMServices.vue"],"sourcesContent":["<template>\r\n  <Bar v-if=\"loaded\" :data=\"chartData\" />\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport { Bar } from 'vue-chartjs'\r\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from 'chart.js'\r\n\r\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale)\r\n\r\nexport default {\r\n  name: 'BarChart',\r\n  components: { Bar }, // Change the component to Bar\r\n  data() {\r\n    return {\r\n      loaded: false,\r\n      chartData: null\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchChartData();\r\n  },\r\n  methods: {\r\n    async fetchChartData() {\r\n      try {\r\n        const response = await axios.get('/services');\r\n        this.mapResponseToChartData(response.data);\r\n        this.loaded = true;\r\n      } catch (error) {\r\n        console.error('Error fetching data from the API:', error);\r\n        // Handle error, display message, or log it\r\n      }\r\n    },\r\n    mapResponseToChartData(data) {\r\n      // Map the response data to chartData\r\n      this.chartData = {\r\n        labels: data.servicesData.map(item => item.Service),\r\n        datasets: [{\r\n          label: 'Total Amount per Services',\r\n          data: data.servicesData.map(item => item.TotalAmount),\r\n          backgroundColor: 'rgba(75, 192, 192, 0.8)',\r\n          borderColor: 'rgba(75, 192, 192, 1)',\r\n          borderWidth: 1,\r\n        }],\r\n      };\r\n    },\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";;;SACaA,KAAA,CAAAC,MAAM,I,cAAjBC,YAAA,CAAuCC,cAAA;;IAAnBC,IAAI,EAAEJ,KAAA,CAAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}