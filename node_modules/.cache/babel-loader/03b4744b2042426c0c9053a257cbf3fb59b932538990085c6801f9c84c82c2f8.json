{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Pie = _resolveComponent(\"Pie\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$data.loaded ? (_openBlock(), _createBlock(_component_Pie, {\n    key: 0,\n    data: $data.chartData\n  }, null, 8 /* PROPS */, [\"data\"])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","$data","loaded","_createBlock","_component_Pie","data","chartData"],"sources":["C:\\laragon\\www\\GitHub\\Funeral_System\\src\\components\\Admin\\TotalPercentage.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <Pie v-if=\"loaded\" :data=\"chartData\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Pie } from 'vue-chartjs'\r\nimport { Chart as ChartJS, Title, Tooltip, Legend, PieController, CategoryScale, LinearScale, PointElement, ArcElement } from 'chart.js'\r\nimport axios from 'axios';\r\n\r\nChartJS.register(Title, Tooltip, Legend, PieController, CategoryScale, LinearScale, PointElement, ArcElement)\r\n\r\nexport default {\r\n  name: 'PieChart',\r\n  components: { Pie },\r\n  data() {\r\n    return {\r\n      loaded: false,\r\n      chartData: null\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchChartData();\r\n  },\r\n  methods: {\r\n    async fetchChartData() {\r\n      try {\r\n        const response = await axios.get('/totallocationpercentage');\r\n        this.mapResponseToChartData(response.data);\r\n        this.loaded = true;\r\n      } catch (error) {\r\n        console.error('Error fetching data from the API:', error);\r\n        // Handle error, display message, or log it\r\n      }\r\n    },\r\n    mapResponseToChartData(data) {\r\n      // Map the response data to chartData\r\n      this.chartData = {\r\n        labels: data.addresses.map(item => item.Address),\r\n        datasets: [{\r\n          data: data.addresses.map(item => item.PercentagePlanHolder),\r\n          backgroundColor: [\r\n            'rgba(255, 99, 132, 0.8)',\r\n            'rgba(54, 162, 235, 0.8)',\r\n            'rgba(255, 206, 86, 0.8)',\r\n            'rgba(75, 192, 192, 0.8)',\r\n            'rgba(153, 102, 255, 0.8)',\r\n          ],\r\n          hoverBackgroundColor: [\r\n            'rgba(255, 99, 132, 1)',\r\n            'rgba(54, 162, 235, 1)',\r\n            'rgba(255, 206, 86, 1)',\r\n            'rgba(75, 192, 192, 1)',\r\n            'rgba(153, 102, 255, 1)',\r\n          ],\r\n        }],\r\n      };\r\n    },\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAW;;;uBAAtBC,mBAAA,CAEM,OAFNC,UAEM,GADOC,KAAA,CAAAC,MAAM,I,cAAjBC,YAAA,CAAuCC,cAAA;;IAAnBC,IAAI,EAAEJ,KAAA,CAAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}