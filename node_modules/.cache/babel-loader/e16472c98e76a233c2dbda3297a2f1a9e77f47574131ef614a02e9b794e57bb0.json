{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, vShow as _vShow, withModifiers as _withModifiers, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2bc3d388\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"chat-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"chat-messages\"\n};\nconst _hoisted_3 = {\n  class: \"message-time\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_icon = _resolveComponent(\"v-icon\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_text_field = _resolveComponent(\"v-text-field\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Chat toggle button \"), _createVNode(_component_v_btn, {\n    onClick: $options.toggleChat,\n    icon: \"\",\n    class: \"chat-toggle-button\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_icon, null, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString($data.chatVisible ? 'mdi-comment' : 'mdi-message-text'), 1 /* TEXT */)]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), $data.chatVisible ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id\n    }, [_createElementVNode(\"div\", {\n      class: _normalizeClass([\"message\", {\n        'my-message': message.isMine\n      }])\n    }, [_createElementVNode(\"p\", null, [_createTextVNode(_toDisplayString(message.sender) + \": \" + _toDisplayString(message.text) + \" \", 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_3, _toDisplayString(message.timestamp), 1 /* TEXT */)])], 2 /* CLASS */)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Chat input form \"), _withDirectives(_createElementVNode(\"form\", {\n    class: \"chat-input\",\n    onSubmit: _cache[1] || (_cache[1] = _withModifiers((...args) => $options.sendMessage && $options.sendMessage(...args), [\"prevent\"]))\n  }, [_createVNode(_component_v_text_field, {\n    modelValue: $data.newMessage,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newMessage = $event),\n    label: \"Type your message\",\n    outlined: \"\",\n    dense: \"\",\n    \"full-width\": \"\"\n  }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_btn, {\n    type: \"submit\",\n    color: \"primary\",\n    class: \"send-button\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Send\")]),\n    _: 1 /* STABLE */\n  })], 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vShow, $data.chatVisible]])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_createVNode","_component_v_btn","onClick","$options","toggleChat","icon","_component_v_icon","$data","chatVisible","_hoisted_2","_Fragment","_renderList","messages","message","key","id","_createElementVNode","_normalizeClass","isMine","sender","_toDisplayString","text","_hoisted_3","timestamp","onSubmit","_cache","_withModifiers","args","sendMessage","_component_v_text_field","newMessage","$event","label","outlined","dense","type","color"],"sources":["C:\\laragon\\www\\GitHub\\Funeral_System\\src\\components\\Chat.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <!-- Chat toggle button -->\r\n    <v-btn @click=\"toggleChat\" icon class=\"chat-toggle-button\">\r\n      <v-icon>{{ chatVisible ? 'mdi-comment' : 'mdi-message-text' }}</v-icon>\r\n    </v-btn>\r\n\r\n    <div v-if=\"chatVisible\" class=\"chat-messages\">\r\n      <div v-for=\"message in messages\" :key=\"message.id\">\r\n        <div class=\"message\" :class=\"{ 'my-message': message.isMine }\">\r\n          <p>\r\n            {{ message.sender }}: {{ message.text }}\r\n            <span class=\"message-time\">{{ message.timestamp }}</span>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Chat input form -->\r\n    <form v-show=\"chatVisible\" class=\"chat-input\" @submit.prevent=\"sendMessage\">\r\n      <v-text-field v-model=\"newMessage\" label=\"Type your message\" outlined dense full-width></v-text-field>\r\n      <v-btn type=\"submit\" color=\"primary\" class=\"send-button\">Send</v-btn>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from 'vue';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      messages: [\r\n        { id: 1, sender: 'Pj', text: 'Hello there!', isMine: false, timestamp: '10:00 AM' },\r\n        { id: 2, sender: 'You', text: 'Hi Rian!', isMine: true, timestamp: '10:05 AM' },\r\n        \r\n      ],\r\n      newMessage: '',\r\n      chatVisible: false,\r\n    };\r\n  },\r\n  methods: {\r\n    sendMessage() {\r\n      const message = this.newMessage.trim();\r\n      if (message) {\r\n        const currentTime = new Date().toLocaleTimeString();\r\n        this.messages.push({ id: Date.now(), sender: 'You', text: message, isMine: true, timestamp: currentTime });\r\n        this.newMessage = '';\r\n      }\r\n    },\r\n    toggleChat() {\r\n      this.chatVisible = !this.chatVisible;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 10vh;\r\n  padding: 16px;\r\n}\r\n\r\n.chat-messages {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 16px;\r\n}\r\n\r\n.my-message {\r\n  background-color: #DCF8C6;\r\n  align-self: flex-end;\r\n  border-radius: 8px;\r\n  margin: 4px 0;\r\n  padding: 8px;\r\n}\r\n\r\n.chat-input {\r\n  padding: 16px;\r\n}\r\n\r\n.chat-toggle-button {\r\n  position: fixed;\r\n  bottom: 16px;\r\n  right: 26px;\r\n  background-color: white;\r\n}\r\n\r\n.chat-toggle-button .v-icon {\r\n  color: rgb(25, 152, 194);\r\n}\r\n\r\n.send-button {\r\n  margin-top: 66px;\r\n}\r\n\r\n.message-time {\r\n  color: gray;\r\n  font-size: 12px;\r\n}\r\n\r\n@media (max-width: 600px) {\r\n  .chat-container {\r\n    padding: 8px;\r\n  }\r\n\r\n  .chat-messages {\r\n    padding: 8px;\r\n  }\r\n\r\n  .chat-input {\r\n    padding: 8px;\r\n  }\r\n\r\n  .send-button {\r\n    margin-top: 8px;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAgB;;;EAMDA,KAAK,EAAC;;;EAKhBA,KAAK,EAAC;AAAc;;;;;uBAXpCC,mBAAA,CAsBM,OAtBNC,UAsBM,GArBJC,mBAAA,wBAA2B,EAC3BC,YAAA,CAEQC,gBAAA;IAFAC,OAAK,EAAEC,QAAA,CAAAC,UAAU;IAAEC,IAAI,EAAJ,EAAI;IAACT,KAAK,EAAC;;sBACpC,MAAuE,CAAvEI,YAAA,CAAuEM,iBAAA;wBAA/D,MAAsD,C,kCAAnDC,KAAA,CAAAC,WAAW,sD;;;;;;kCAGbD,KAAA,CAAAC,WAAW,I,cAAtBX,mBAAA,CASM,OATNY,UASM,I,kBARJZ,mBAAA,CAOMa,SAAA,QAAAC,WAAA,CAPiBJ,KAAA,CAAAK,QAAQ,EAAnBC,OAAO;yBAAnBhB,mBAAA,CAOM;MAP4BiB,GAAG,EAAED,OAAO,CAACE;QAC7CC,mBAAA,CAKM;MALDpB,KAAK,EAAAqB,eAAA,EAAC,SAAS;QAAA,cAAyBJ,OAAO,CAACK;MAAM;QACzDF,mBAAA,CAGI,Y,kCAFCH,OAAO,CAACM,MAAM,IAAG,IAAE,GAAAC,gBAAA,CAAGP,OAAO,CAACQ,IAAI,IAAG,GACxC,iBAAAL,mBAAA,CAAyD,QAAzDM,UAAyD,EAAAF,gBAAA,CAA3BP,OAAO,CAACU,SAAS,iB;yEAMvDxB,mBAAA,qBAAwB,E,gBACxBiB,mBAAA,CAGO;IAHoBpB,KAAK,EAAC,YAAY;IAAE4B,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAAAC,cAAA,KAAAC,IAAA,KAAUxB,QAAA,CAAAyB,WAAA,IAAAzB,QAAA,CAAAyB,WAAA,IAAAD,IAAA,CAAW;MACxE3B,YAAA,CAAsG6B,uBAAA;gBAA/EtB,KAAA,CAAAuB,UAAU;+DAAVvB,KAAA,CAAAuB,UAAU,GAAAC,MAAA;IAAEC,KAAK,EAAC,mBAAmB;IAACC,QAAQ,EAAR,EAAQ;IAACC,KAAK,EAAL,EAAK;IAAC,YAAU,EAAV;2CAC5ElC,YAAA,CAAqEC,gBAAA;IAA9DkC,IAAI,EAAC,QAAQ;IAACC,KAAK,EAAC,SAAS;IAACxC,KAAK,EAAC;;sBAAc,MAAI,C,iBAAJ,MAAI,E;;wDAFjDW,KAAA,CAAAC,WAAW,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}